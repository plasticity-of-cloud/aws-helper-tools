
+      1: #!/bin/bash
+      2: 
+      3: set -e
+      4: 
+      5: # Colors for output
+      6: RED='\033[0;31m'
+      7: GREEN='\033[0;32m'
+      8: YELLOW='\033[1;33m'
+      9: NC='\033[0m' # No Color
+     10: 
+     11: echo -e "${GREEN}=== EC2 Spot Instance with Hibernation Setup ===${NC}"
+     12: 
+     13: # Region selection
+     14: echo -e "${YELLOW}Available regions:${NC}"
+     15: echo "1) us-east-1 (N. Virginia)"
+     16: echo "2) us-west-2 (Oregon)"
+     17: echo "3) eu-west-1 (Ireland)"
+     18: echo "4) eu-central-1 (Frankfurt)"
+     19: echo "5) ap-southeast-1 (Singapore)"
+     20: read -p "Select region (1-5): " region_choice
+     21: 
+     22: case $region_choice in
+     23:     1) REGION="us-east-1" ;;
+     24:     2) REGION="us-west-2" ;;
+     25:     3) REGION="eu-west-1" ;;
+     26:     4) REGION="eu-central-1" ;;
+     27:     5) REGION="ap-southeast-1" ;;
+     28:     *) echo -e "${RED}Invalid choice${NC}"; exit 1 ;;
+     29: esac
+     30: 
+     31: echo -e "${GREEN}Selected region: $REGION${NC}"
+     32: 
+     33: # Get Ubuntu 24.04 LTS AMI
+     34: echo -e "${YELLOW}Finding Ubuntu 24.04 LTS AMI...${NC}"
+     35: AMI_ID=$(aws ec2 describe-images \
+     36:     --region $REGION \
+     37:     --owners 099720109477 \
+     38:     --filters "Name=name,Values=ubuntu/images/hvm-ssd-gp3/ubuntu-noble-24.04-arm64-server-*" \
+     39:               "Name=state,Values=available" \
+     40:     --query 'Images | sort_by(@, &CreationDate) | [-1].ImageId' \
+     41:     --output text)
+     42: 
+     43: if [ "$AMI_ID" = "None" ]; then
+     44:     echo -e "${RED}Ubuntu 24.04 LTS AMI not found${NC}"
+     45:     exit 1
+     46: fi
+     47: echo -e "${GREEN}Found AMI: $AMI_ID${NC}"
+     48: 
+     49: # Get default VPC
+     50: VPC_ID=$(aws ec2 describe-vpcs \
+     51:     --region $REGION \
+     52:     --filters "Name=is-default,Values=true" \
+     53:     --query 'Vpcs[0].VpcId' \
+     54:     --output text)
+     55: 
+     56: if [ "$VPC_ID" = "None" ]; then
+     57:     echo -e "${RED}Default VPC not found${NC}"
+     58:     exit 1
+     59: fi
+     60: 
+     61: # Get VPC CIDR
+     62: VPC_CIDR=$(aws ec2 describe-vpcs \
+     63:     --region $REGION \
+     64:     --vpc-ids $VPC_ID \
+     65:     --query 'Vpcs[0].CidrBlock' \
+     66:     --output text)
+     67: 
+     68: echo -e "${GREEN}Using VPC: $VPC_ID ($VPC_CIDR)${NC}"
+     69: 
+     70: # Create security group
+     71: SG_NAME="hibernation-spot-sg-$(date +%s)"
+     72: echo -e "${YELLOW}Creating security group...${NC}"
+     73: 
+     74: SG_ID=$(aws ec2 create-security-group \
+     75:     --region $REGION \
+     76:     --group-name $SG_NAME \
+     77:     --description "Security group for hibernation spot instance with DCV" \
+     78:     --vpc-id $VPC_ID \
+     79:     --query 'GroupId' \
+     80:     --output text)
+     81: 
+     82: # Add security group rules
+     83: aws ec2 authorize-security-group-ingress \
+     84:     --region $REGION \
+     85:     --group-id $SG_ID \
+     86:     --protocol tcp \
+     87:     --port 22 \
+     88:     --cidr $VPC_CIDR
+     89: 
+     90: aws ec2 authorize-security-group-ingress \
+     91:     --region $REGION \
+     92:     --group-id $SG_ID \
+     93:     --protocol tcp \
+     94:     --port 8443 \
+     95:     --cidr $VPC_CIDR
+     96: 
+     97: echo -e "${GREEN}Security group created: $SG_ID${NC}"
+     98: 
+     99: # Create user data script
+    100: USER_DATA=$(cat << 'EOF'
+    101: #!/bin/bash
+    102: apt-get update
+    103: apt-get install -y awscli
+    104: 
+    105: # Install DCV Server
+    106: wget https://d1uj6qtbmh3dt5.cloudfront.net/NICE-GPG-KEY
+    107: gpg --import NICE-GPG-KEY
+    108: wget https://d1uj6qtbmh3dt5.cloudfront.net/2023.1/Servers/nice-dcv-2023.1-16220-ubuntu2204-aarch64.tgz
+    109: tar -xvzf nice-dcv-2023.1-16220-ubuntu2204-aarch64.tgz
+    110: cd nice-dcv-2023.1-16220-ubuntu2204-aarch64
+    111: apt-get install -y ./nice-dcv-server_2023.1.16220-1_arm64.deb
+    112: apt-get install -y ./nice-xdcv_2023.1.537-1_arm64.deb
+    113: 
+    114: # Configure DCV
+    115: systemctl enable dcvserver
+    116: systemctl start dcvserver
+    117: 
+    118: # Create DCV session
+    119: sudo -u ubuntu dcv create-session --type=virtual --user ubuntu ubuntu-session
+    120: 
+    121: # Install desktop environment
+    122: apt-get install -y ubuntu-desktop-minimal
+    123: 
+    124: echo "Setup complete"
+    125: EOF
+    126: )
+    127: 
+    128: # Encode user data
+    129: USER_DATA_B64=$(echo "$USER_DATA" | base64 -w 0)
+    130: 
+    131: # Create launch template
+    132: TEMPLATE_NAME="hibernation-spot-template-$(date +%s)"
+    133: echo -e "${YELLOW}Creating launch template...${NC}"
+    134: 
+    135: aws ec2 create-launch-template \
+    136:     --region $REGION \
+    137:     --launch-template-name $TEMPLATE_NAME \
+    138:     --launch-template-data "{
+    139:         \"ImageId\": \"$AMI_ID\",
+    140:         \"InstanceType\": \"m7g.2xlarge\",
+    141:         \"SecurityGroupIds\": [\"$SG_ID\"],
+    142:         \"IamInstanceProfile\": {
+    143:             \"Name\": \"S3MountPointRole\"
+    144:         },
+    145:         \"BlockDeviceMappings\": [{
+    146:             \"DeviceName\": \"/dev/sda1\",
+    147:             \"Ebs\": {
+    148:                 \"VolumeSize\": 50,
+    149:                 \"VolumeType\": \"gp3\",
+    150:                 \"Throughput\": 500,
+    151:                 \"Encrypted\": true,
+    152:                 \"DeleteOnTermination\": true
+    153:             }
+    154:         }],
+    155:         \"UserData\": \"$USER_DATA_B64\",
+    156:         \"HibernationOptions\": {
+    157:             \"Configured\": true
+    158:         }
+    159:     }" > /dev/null
+    160: 
+    161: echo -e "${GREEN}Launch template created: $TEMPLATE_NAME${NC}"
+    162: 
+    163: # Launch spot instance
+    164: echo -e "${YELLOW}Launching spot instance...${NC}"
+    165: 
+    166: INSTANCE_ID=$(aws ec2 run-instances \
+    167:     --region $REGION \
+    168:     --launch-template "LaunchTemplateName=$TEMPLATE_NAME" \
+    169:     --instance-market-options '{
+    170:         "MarketType": "spot",
+    171:         "SpotOptions": {
+    172:             "SpotInstanceType": "persistent",
+    173:             "InstanceInterruptionBehavior": "hibernate"
+    174:         }
+    175:     }' \
+    176:     --query 'Instances[0].InstanceId' \
+    177:     --output text)
+    178: 
+    179: echo -e "${GREEN}Instance launched: $INSTANCE_ID${NC}"
+    180: 
+    181: # Wait for instance to be running
+    182: echo -e "${YELLOW}Waiting for instance to be running...${NC}"
+    183: aws ec2 wait instance-running --region $REGION --instance-ids $INSTANCE_ID
+    184: 
+    185: # Get instance details
+    186: INSTANCE_IP=$(aws ec2 describe-instances \
+    187:     --region $REGION \
+    188:     --instance-ids $INSTANCE_ID \
+    189:     --query 'Reservations[0].Instances[0].PrivateIpAddress' \
+    190:     --output text)
+    191: 
+    192: echo -e "${GREEN}=== Setup Complete ===${NC}"
+    193: echo -e "${GREEN}Instance ID: $INSTANCE_ID${NC}"
+    194: echo -e "${GREEN}Private IP: $INSTANCE_IP${NC}"
+    195: echo -e "${GREEN}SSH Access: ssh ubuntu@$INSTANCE_IP${NC}"
+    196: echo -e "${GREEN}DCV Access: https://$INSTANCE_IP:8443${NC}"
+    197: echo -e "${YELLOW}Note: Wait ~10 minutes for DCV setup to complete${NC}"
+    198: 
+    199: # Create cleanup script
+    200: cat > cleanup-$INSTANCE_ID.sh << EOL
+    201: #!/bin/bash
+    202: echo "Cleaning up resources..."
+    203: aws ec2 terminate-instances --region $REGION --instance-ids $INSTANCE_ID
+    204: aws ec2 delete-launch-template --region $REGION --launch-template-name $TEMPLATE_NAME
+    205: aws ec2 delete-security-group --region $REGION --group-id $SG_ID
+    206: echo "Cleanup complete"
+    207: EOL
+    208: 
+    209: chmod +x cleanup-$INSTANCE_ID.sh
+    210: echo -e "${YELLOW}Cleanup script created: cleanup-$INSTANCE_ID.sh${NC}"
